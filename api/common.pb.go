// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RC int32

const (
	RC_RC_UNKNOWN RC = 0
	// =========== Proxy 模块的状态码 ===========
	RC_PROXY_OK                    RC = 1000
	RC_PROXY_INVALID_REQUEST       RC = 1001
	RC_PROXY_TIMEOUT               RC = 1002
	RC_PROXY_INTERNAL_ERROR        RC = 1003
	RC_PROXY_KVSTORE_FAILED        RC = 1004
	RC_PROXY_NO_AVAILABLE_EXECUTOR RC = 1005
	RC_PROXY_ALL_EXECUTOR_FAILED   RC = 1030
	// =========== Executor 模块的状态码 ===========
	RC_EXECUTOR_OK                       RC = 2000
	RC_EXECUTOR_RESOURCE_NOT_FOUND       RC = 2001
	RC_EXECUTOR_TASK_FAILED              RC = 2002
	RC_EXECUTOR_INTERNAL_ERROR           RC = 2003
	RC_EXECUTOR_INVALID_ARGUMENT         RC = 2004
	RC_EXECUTOR_TASK_ALREADY_CLAIMED     RC = 2005
	RC_EXECUTOR_UNEXPECTED_RESULT        RC = 2006
	RC_EXECUTOR_RESOURCE_CREATION_FAILED RC = 2007
	RC_EXECUTOR_ENV_PREPARE_FAILED       RC = 2008
	RC_EXECUTOR_RUNNER_CREATION_FAILED   RC = 2009
)

var RC_name = map[int32]string{
	0:    "RC_UNKNOWN",
	1000: "PROXY_OK",
	1001: "PROXY_INVALID_REQUEST",
	1002: "PROXY_TIMEOUT",
	1003: "PROXY_INTERNAL_ERROR",
	1004: "PROXY_KVSTORE_FAILED",
	1005: "PROXY_NO_AVAILABLE_EXECUTOR",
	1030: "PROXY_ALL_EXECUTOR_FAILED",
	2000: "EXECUTOR_OK",
	2001: "EXECUTOR_RESOURCE_NOT_FOUND",
	2002: "EXECUTOR_TASK_FAILED",
	2003: "EXECUTOR_INTERNAL_ERROR",
	2004: "EXECUTOR_INVALID_ARGUMENT",
	2005: "EXECUTOR_TASK_ALREADY_CLAIMED",
	2006: "EXECUTOR_UNEXPECTED_RESULT",
	2007: "EXECUTOR_RESOURCE_CREATION_FAILED",
	2008: "EXECUTOR_ENV_PREPARE_FAILED",
	2009: "EXECUTOR_RUNNER_CREATION_FAILED",
}

var RC_value = map[string]int32{
	"RC_UNKNOWN":                        0,
	"PROXY_OK":                          1000,
	"PROXY_INVALID_REQUEST":             1001,
	"PROXY_TIMEOUT":                     1002,
	"PROXY_INTERNAL_ERROR":              1003,
	"PROXY_KVSTORE_FAILED":              1004,
	"PROXY_NO_AVAILABLE_EXECUTOR":       1005,
	"PROXY_ALL_EXECUTOR_FAILED":         1030,
	"EXECUTOR_OK":                       2000,
	"EXECUTOR_RESOURCE_NOT_FOUND":       2001,
	"EXECUTOR_TASK_FAILED":              2002,
	"EXECUTOR_INTERNAL_ERROR":           2003,
	"EXECUTOR_INVALID_ARGUMENT":         2004,
	"EXECUTOR_TASK_ALREADY_CLAIMED":     2005,
	"EXECUTOR_UNEXPECTED_RESULT":        2006,
	"EXECUTOR_RESOURCE_CREATION_FAILED": 2007,
	"EXECUTOR_ENV_PREPARE_FAILED":       2008,
	"EXECUTOR_RUNNER_CREATION_FAILED":   2009,
}

func (x RC) String() string {
	return proto.EnumName(RC_name, int32(x))
}

func (RC) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

type Peer struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int32    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

func (m *Peer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Peer.Unmarshal(m, b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
}
func (m *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(m, src)
}
func (m *Peer) XXX_Size() int {
	return xxx_messageInfo_Peer.Size(m)
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Peer) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Peer) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Project struct {
	NinjaHost            string   `protobuf:"bytes,1,opt,name=ninja_host,json=ninjaHost,proto3" json:"ninja_host,omitempty"`
	NinjaDir             string   `protobuf:"bytes,2,opt,name=ninja_dir,json=ninjaDir,proto3" json:"ninja_dir,omitempty"`
	RootDir              string   `protobuf:"bytes,3,opt,name=root_dir,json=rootDir,proto3" json:"root_dir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}

func (m *Project) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Project.Unmarshal(m, b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Project.Marshal(b, m, deterministic)
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return xxx_messageInfo_Project.Size(m)
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetNinjaHost() string {
	if m != nil {
		return m.NinjaHost
	}
	return ""
}

func (m *Project) GetNinjaDir() string {
	if m != nil {
		return m.NinjaDir
	}
	return ""
}

func (m *Project) GetRootDir() string {
	if m != nil {
		return m.RootDir
	}
	return ""
}

// 通用的返回 Status
type Status struct {
	Code                 RC       `protobuf:"varint,1,opt,name=code,proto3,enum=api.RC" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() RC {
	if m != nil {
		return m.Code
	}
	return RC_RC_UNKNOWN
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("api.RC", RC_name, RC_value)
	proto.RegisterType((*Peer)(nil), "api.Peer")
	proto.RegisterType((*Project)(nil), "api.Project")
	proto.RegisterType((*Status)(nil), "api.Status")
}

func init() {
	proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206)
}

var fileDescriptor_555bd8c177793206 = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x86, 0xbf, 0xa6, 0x69, 0x9d, 0x9e, 0x8f, 0xd6, 0xa3, 0x23, 0x10, 0x49, 0x43, 0x69, 0x88,
	0x10, 0xaa, 0x58, 0x04, 0x09, 0x76, 0x6c, 0xd0, 0xd4, 0x9e, 0x82, 0x15, 0x67, 0xc6, 0x8c, 0xc7,
	0x21, 0x65, 0x33, 0x98, 0xc4, 0x02, 0x57, 0x4a, 0x6c, 0x39, 0xe6, 0x16, 0xd8, 0x71, 0x6f, 0xfc,
	0xff, 0xdc, 0x01, 0xbf, 0xf7, 0x80, 0x62, 0x27, 0x6e, 0x4b, 0x77, 0x7e, 0xdf, 0xe7, 0xe8, 0xd1,
	0x99, 0x23, 0x19, 0x2e, 0x8d, 0x93, 0xe9, 0x34, 0x99, 0xf5, 0xd2, 0x2c, 0xc9, 0x13, 0x5c, 0x0f,
	0xd3, 0xb8, 0x7b, 0x1f, 0xea, 0x5e, 0x14, 0x65, 0xb8, 0x03, 0xb5, 0x78, 0xd2, 0x5c, 0xeb, 0xac,
	0x1d, 0x6c, 0xc9, 0x5a, 0x3c, 0x29, 0x72, 0xda, 0xac, 0x2d, 0x73, 0x8a, 0x08, 0xf5, 0x34, 0xc9,
	0xf2, 0xe6, 0x7a, 0x67, 0xed, 0x60, 0x43, 0x16, 0xdf, 0xdd, 0x67, 0x60, 0x78, 0x59, 0x72, 0x12,
	0x8d, 0x73, 0xdc, 0x03, 0x98, 0xc5, 0xb3, 0x93, 0x50, 0xbf, 0x4c, 0xe6, 0xf9, 0x52, 0xb3, 0x55,
	0x34, 0x8f, 0x92, 0x79, 0x8e, 0x6d, 0x28, 0x83, 0x9e, 0xc4, 0xd9, 0x52, 0xda, 0x28, 0x0a, 0x3b,
	0xce, 0xb0, 0x05, 0x8d, 0x2c, 0x49, 0xf2, 0x82, 0xad, 0x17, 0xcc, 0x58, 0x64, 0x3b, 0xce, 0xba,
	0x0f, 0x60, 0xd3, 0xcf, 0xc3, 0xfc, 0xd5, 0x1c, 0xdb, 0x50, 0x1f, 0x27, 0x93, 0xa8, 0x50, 0xef,
	0xdc, 0x35, 0x7a, 0x61, 0x1a, 0xf7, 0xa4, 0x25, 0x8b, 0x12, 0x9b, 0x60, 0x4c, 0xa3, 0xf9, 0x3c,
	0x7c, 0x11, 0x2d, 0xe5, 0xab, 0x78, 0xfb, 0x4d, 0x1d, 0x6a, 0xd2, 0xc2, 0x1d, 0x00, 0x69, 0xe9,
	0x80, 0xf7, 0xb9, 0x78, 0xc2, 0xc9, 0x7f, 0xb8, 0x0d, 0x0d, 0x4f, 0x8a, 0xd1, 0xb1, 0x16, 0x7d,
	0xf2, 0xdd, 0xc0, 0x5d, 0xb8, 0x52, 0x46, 0x87, 0x0f, 0xa9, 0xeb, 0xd8, 0x5a, 0xb2, 0xc7, 0x01,
	0xf3, 0x15, 0xf9, 0x61, 0x20, 0xc2, 0x76, 0xc9, 0x94, 0x33, 0x60, 0x22, 0x50, 0xe4, 0xa7, 0x81,
	0x2d, 0xb8, 0xbc, 0x9a, 0x57, 0x4c, 0x72, 0xea, 0x6a, 0x26, 0xa5, 0x90, 0xe4, 0xd7, 0x19, 0xd4,
	0x1f, 0xfa, 0x4a, 0x48, 0xa6, 0x8f, 0xa8, 0xe3, 0x32, 0x9b, 0xfc, 0x36, 0xb0, 0x03, 0xed, 0x12,
	0x71, 0xa1, 0xe9, 0x90, 0x3a, 0x2e, 0x3d, 0x74, 0x99, 0x66, 0x23, 0x66, 0x05, 0x4a, 0x48, 0xf2,
	0xc7, 0xc0, 0xeb, 0xd0, 0x2a, 0x27, 0xa8, 0xeb, 0x56, 0x60, 0x65, 0x78, 0xdd, 0x40, 0x02, 0xff,
	0x57, 0xad, 0xe8, 0x93, 0xb7, 0xe6, 0xc2, 0x59, 0x35, 0x92, 0xf9, 0x22, 0x90, 0x16, 0xd3, 0x5c,
	0x28, 0x7d, 0x24, 0x02, 0x6e, 0x93, 0x77, 0xe6, 0x62, 0xa1, 0x6a, 0x42, 0x51, 0xbf, 0xbf, 0xd2,
	0xbd, 0x37, 0xf1, 0x1a, 0x5c, 0xad, 0xd0, 0x3f, 0x2f, 0xf9, 0x60, 0x2e, 0x96, 0x39, 0x43, 0xcb,
	0xbb, 0x50, 0xf9, 0x30, 0x18, 0x30, 0xae, 0xc8, 0x47, 0x13, 0xbb, 0xb0, 0x77, 0x5e, 0x4c, 0x5d,
	0xc9, 0xa8, 0x7d, 0xac, 0x2d, 0x97, 0x3a, 0x03, 0x66, 0x93, 0x4f, 0x26, 0xee, 0xc3, 0x6e, 0x35,
	0x13, 0x70, 0x36, 0xf2, 0x98, 0xa5, 0xd8, 0xe2, 0xbc, 0x7e, 0xe0, 0x2a, 0xf2, 0xd9, 0xc4, 0x5b,
	0x70, 0xe3, 0xe2, 0xfe, 0x96, 0x64, 0x54, 0x39, 0x82, 0xaf, 0x56, 0xfd, 0x72, 0xfe, 0x9d, 0x8c,
	0x0f, 0xb5, 0x27, 0x99, 0x47, 0x4f, 0xaf, 0xfb, 0xd5, 0xc4, 0x9b, 0xb0, 0x7f, 0x6a, 0x0a, 0x38,
	0x67, 0xf2, 0x82, 0xe7, 0x9b, 0x79, 0x68, 0x3c, 0xdd, 0xe8, 0xdd, 0x09, 0xd3, 0xf8, 0xf9, 0x66,
	0xf1, 0x0f, 0xdc, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x88, 0xba, 0x4e, 0x15, 0x13, 0x03, 0x00,
	0x00,
}
