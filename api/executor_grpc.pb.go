// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0--rc1
// source: executor.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShareBuildExecutor_PrepareLocalEnv_FullMethodName  = "/api.ShareBuildExecutor/PrepareLocalEnv"
	ShareBuildExecutor_SubmitAndExecute_FullMethodName = "/api.ShareBuildExecutor/SubmitAndExecute"
	ShareBuildExecutor_CleanupLocalEnv_FullMethodName  = "/api.ShareBuildExecutor/CleanupLocalEnv"
)

// ShareBuildExecutorClient is the client API for ShareBuildExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShareBuildExecutorClient interface {
	PrepareLocalEnv(ctx context.Context, in *PrepareLocalEnvRequest, opts ...grpc.CallOption) (*PrepareLocalEnvResponse, error)
	SubmitAndExecute(ctx context.Context, in *SubmitAndExecuteRequest, opts ...grpc.CallOption) (*SubmitAndExecuteResponse, error)
	CleanupLocalEnv(ctx context.Context, in *CleanupLocalEnvRequest, opts ...grpc.CallOption) (*CleanupLocalEnvResponse, error)
}

type shareBuildExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewShareBuildExecutorClient(cc grpc.ClientConnInterface) ShareBuildExecutorClient {
	return &shareBuildExecutorClient{cc}
}

func (c *shareBuildExecutorClient) PrepareLocalEnv(ctx context.Context, in *PrepareLocalEnvRequest, opts ...grpc.CallOption) (*PrepareLocalEnvResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareLocalEnvResponse)
	err := c.cc.Invoke(ctx, ShareBuildExecutor_PrepareLocalEnv_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareBuildExecutorClient) SubmitAndExecute(ctx context.Context, in *SubmitAndExecuteRequest, opts ...grpc.CallOption) (*SubmitAndExecuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitAndExecuteResponse)
	err := c.cc.Invoke(ctx, ShareBuildExecutor_SubmitAndExecute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareBuildExecutorClient) CleanupLocalEnv(ctx context.Context, in *CleanupLocalEnvRequest, opts ...grpc.CallOption) (*CleanupLocalEnvResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanupLocalEnvResponse)
	err := c.cc.Invoke(ctx, ShareBuildExecutor_CleanupLocalEnv_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShareBuildExecutorServer is the server API for ShareBuildExecutor service.
// All implementations must embed UnimplementedShareBuildExecutorServer
// for forward compatibility.
type ShareBuildExecutorServer interface {
	PrepareLocalEnv(context.Context, *PrepareLocalEnvRequest) (*PrepareLocalEnvResponse, error)
	SubmitAndExecute(context.Context, *SubmitAndExecuteRequest) (*SubmitAndExecuteResponse, error)
	CleanupLocalEnv(context.Context, *CleanupLocalEnvRequest) (*CleanupLocalEnvResponse, error)
	mustEmbedUnimplementedShareBuildExecutorServer()
}

// UnimplementedShareBuildExecutorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShareBuildExecutorServer struct{}

func (UnimplementedShareBuildExecutorServer) PrepareLocalEnv(context.Context, *PrepareLocalEnvRequest) (*PrepareLocalEnvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareLocalEnv not implemented")
}
func (UnimplementedShareBuildExecutorServer) SubmitAndExecute(context.Context, *SubmitAndExecuteRequest) (*SubmitAndExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAndExecute not implemented")
}
func (UnimplementedShareBuildExecutorServer) CleanupLocalEnv(context.Context, *CleanupLocalEnvRequest) (*CleanupLocalEnvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupLocalEnv not implemented")
}
func (UnimplementedShareBuildExecutorServer) mustEmbedUnimplementedShareBuildExecutorServer() {}
func (UnimplementedShareBuildExecutorServer) testEmbeddedByValue()                            {}

// UnsafeShareBuildExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShareBuildExecutorServer will
// result in compilation errors.
type UnsafeShareBuildExecutorServer interface {
	mustEmbedUnimplementedShareBuildExecutorServer()
}

func RegisterShareBuildExecutorServer(s grpc.ServiceRegistrar, srv ShareBuildExecutorServer) {
	// If the following call pancis, it indicates UnimplementedShareBuildExecutorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShareBuildExecutor_ServiceDesc, srv)
}

func _ShareBuildExecutor_PrepareLocalEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareLocalEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareBuildExecutorServer).PrepareLocalEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareBuildExecutor_PrepareLocalEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareBuildExecutorServer).PrepareLocalEnv(ctx, req.(*PrepareLocalEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareBuildExecutor_SubmitAndExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAndExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareBuildExecutorServer).SubmitAndExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareBuildExecutor_SubmitAndExecute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareBuildExecutorServer).SubmitAndExecute(ctx, req.(*SubmitAndExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareBuildExecutor_CleanupLocalEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupLocalEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareBuildExecutorServer).CleanupLocalEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareBuildExecutor_CleanupLocalEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareBuildExecutorServer).CleanupLocalEnv(ctx, req.(*CleanupLocalEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShareBuildExecutor_ServiceDesc is the grpc.ServiceDesc for ShareBuildExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShareBuildExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ShareBuildExecutor",
	HandlerType: (*ShareBuildExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareLocalEnv",
			Handler:    _ShareBuildExecutor_PrepareLocalEnv_Handler,
		},
		{
			MethodName: "SubmitAndExecute",
			Handler:    _ShareBuildExecutor_SubmitAndExecute_Handler,
		},
		{
			MethodName: "CleanupLocalEnv",
			Handler:    _ShareBuildExecutor_CleanupLocalEnv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "executor.proto",
}
